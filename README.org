# SPDX-FileCopyrightText: 2023 Bogdan Ruslanovich Drozd <bogdan.ruslanovich.drozd@yandex.com>
#
# SPDX-License-Identifier: CC-BY-SA-4.0

#+language: en
#+options: ':t author:nil
#+title: Installing Gentoo

* Introduction

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [[https://www.rfc-editor.org/rfc/rfc2119.txt][RFC 2119]].

This document describes how to install Gentoo with systemd, btrfs on
LUKS root, swap on LUKS, and systemd-boot on an amdm64 system.

This document is not a replacement for official [[https://wiki.gentoo.org/wiki/Handbook:Main_Page][Gentoo Handbook]], you
SHOULD read it before your first installation.

* Installation media

You can use any installation media which contains the following:

- Btrfs utilities
- DOS filesystem tools
- Tool to setup encrypted devices with dm-crypt

[[https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Downloading][Minimal installation CD]] fits.

* Partitioning the data storage

| Partition                   | Size                 | Type             |
|-----------------------------+----------------------+------------------|
| =/dev/efi_system_partition= | 256--1024 MiB        | EFI System       |
| =/dev/swap_partition=       | Any size             | Linux filesystem |
| =/dev/root_partition=       | Rest of data storage | Linux filesystem |

You can use ~fdisk~ for partitioning.

** Caveats

You SHOULD NOT use filesystem type like "Linux root (x86-64)" or
"Linux swap".  There is [[info:systemd-gpt-auto-generator(8)][systemd-gpt-auto-generator]] that automatically
tries to mount that filesystems.  systemd will not find there what
expects.

If you want it anyway, then you MUST add ~systemd.gpt_auto=0~ to the
kernel command line parameters.

* Creating and mounting filesystems

#+begin_src shell
  mkfs.vfat -F 32 /dev/efi_system_partition
  cryptsetup luksFormat /dev/root_partition
  cryptsetup open /dev/root_partition cryptos
  mkfs.btrfs /dev/mapper/cryptos

  ROOT=/mnt/gentoo
  mount -o defaults,compress=zstd /dev/mapper/cryptos "$ROOT"
  btrfs subvolume create "${ROOT}/sv_snapshots"
  btrfs subvolume create "${ROOT}/sv_roots"
  btrfs subvolume create "${ROOT}/sv_roots/sv_gentoo"
  for i in sv_{root,srv,usr,var}; do
      btrfs subvolume create "${ROOT}/sv_roots/sv_gentoo/${i}"
  done
  btrfs subvolume create "${ROOT}/sv_roots/sv_gentoo/sv_usr/sv_local"
  for i in sv_{cache,games,lib,log,mail,spool,tmp}; do
      btrfs subvolume create "${ROOT}/sv_roots/sv_gentoo/sv_var/${i}"
  done
  for i in sv_{AccountsService,NetworkManager,docker,libvirt,machines,portables}
  do
      btrfs subvolume create \
          "${ROOT}/sv_roots/sv_gentoo/sv_var/sv_lib/${i}"
  done
  for i in sv_userdata{,/sv_{home,root}}; do
      btrfs subvolume create "${ROOT}/${i}"
  done
  umount /mnt/gentoo

  OPTS=defaults,compress=zstd
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_root" \
      /dev/mapper/cryptos "$ROOT"
  mkdir -p \
      "$ROOT"/{.btrfs/snapshots,boot,home,root,srv,usr/local,var} \
      "$ROOT"/var/{cache,games,lib,log,mail,spool,tmp} \
      "$ROOT"/var/lib/{AccountsService,NetworkManager,docker,libvirt,machines,portables}
  mount /dev/efi_system_partition "${ROOT}/boot"
  mount -o "${OPTS},subvol=/sv_snapshots" /dev/mapper/cryptos \
      "${ROOT}/.btrfs/snapshots"
  mount -o "${OPTS},subvol=/sv_userdata/sv_home" \
      /dev/mapper/cryptos "${ROOT}/home"
  mount -o "${OPTS},subvol=/sv_userdata/sv_root" \
      /dev/mapper/cryptos "${ROOT}/root"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_srv" \
      /dev/mapper/cryptos "${ROOT}/srv"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_usr/sv_local" \
      /dev/mapper/cryptos "${ROOT}/usr/local"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_cache" \
      /dev/mapper/cryptos "${ROOT}/var/cache"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_games" \
      /dev/mapper/cryptos "${ROOT}/var/games"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_log" \
      /dev/mapper/cryptos "${ROOT}/var/log"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_mail" \
      /dev/mapper/cryptos "${ROOT}/var/mail"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_spool" \
      /dev/mapper/cryptos "${ROOT}/var/spool"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_tmp" \
      /dev/mapper/cryptos "${ROOT}/var/tmp"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_AccountsService" \
      /dev/mapper/cryptos "${ROOT}/var/lib/AccountsService"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_NetworkManager" \
      /dev/mapper/cryptos "${ROOT}/var/lib/NetworkManager"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_docker" \
      /dev/mapper/cryptos "${ROOT}/var/lib/docker"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_libvirt" \
      /dev/mapper/cryptos "${ROOT}/var/lib/libvirt"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_machines" \
      /dev/mapper/cryptos "${ROOT}/var/lib/machines"
  mount -o "${OPTS},subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_portables" \
      /dev/mapper/cryptos "${ROOT}/var/lib/portables"
  mkdir -p \
      "$ROOT"/.btrfs/snapshots/{boot,home,root,srv,usr{,/local},var} \
      "$ROOT"/.btrfs/snapshots/var/{cache,games,lib,log,mail,spool,tmp} \
      "$ROOT"/.btrfs/snapshots/var/lib/{AccountsService,NetworkManager,docker,libvirt,machines,portables}
#+end_src

Note that subvolumes for =/srv=, =/var/lib/machines=, and
=/var/lib/portables= wanted by systemd[fn:6].  To view all datasets
that systemd wants:

#+begin_src shell
  grep '^[vqQ]' /usr/lib/tmpfiles.d/*
#+end_src

* Installing a stage tarball

#+begin_src shell
  ntpd -qg
  cd /mnt/gentoo
  wget "$stage_file"{,.asc,.sha256}
  gpg --import /usr/share/openpgp-keys/gentoo-release.asc
  gpg --verify *.asc
  gpg --verify *.sha256
  chksum="$(sha256sum *.tar.xz | cut -d' ' -f1)"
  grep "$chksum" *.sha256
  tar xpvf *.tar.xz --xattrs-include='*.*' --numeric-owner
  echo $?  # Verify that tar unpack archive successfully.
#+end_src

* Chrooting

#+begin_src shell
  mirrorselect -io >>/mnt/gentoo/etc/portage/make.conf
  mkdir /mnt/gentoo/etc/portage/repos.conf
  cp /mnt/gentoo/usr/share/portage/config/repos.conf \
      /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
  cp -L /etc/resolv.conf /mnt/gentoo/etc
  mount -t proc /proc /mnt/gentoo/proc
  mount -R /sys /mnt/gentoo/sys
  mount --make-rslave /mnt/gentoo/sys
  mount -R /dev /mnt/gentoo/dev
  mount --make-rslave /mnt/gentoo/dev
  mount -B /run /mnt/gentoo/run
  mount --make-slave /mnt/gentoo/run
  chroot /mnt/gentoo /bin/bash
  source /etc/profile
  export PS1="(chroot) $PS1"
#+end_src

* Configuring Portage

#+begin_src shell
  emerge-webrsync
  eselect news list
  eselect news read
  emerge -avuDN @world
  mkdir /etc/portage/{package.{env,license},env}
#+end_src

* Configuring timezone

#+begin_src shell
  ln -sfr /usr/share/zoneinfo/Region/City /etc/localtime
#+end_src

* Configuring locale

=/etc/locale.gen= example:

#+begin_example
  en_US.UTF-8 UTF-8
#+end_example

Generate locales:

#+begin_src shell
  locale-gen
#+end_src

Select locale:

#+begin_src shell
  eselect locale list
  eselect locale set "$locale"
#+end_src

=/etc/locale.conf= example:

#+begin_example
  LANG="en_US.utf8"
  LC_COLLATE="C.utf8"
#+end_example

Reload the environment:

#+begin_src shell
  env-update
  source /etc/profile
  export PS1="(chroot) $PS1"
#+end_src

** Caveats

You SHOULD use "C.utf8" locale for ~LC_COLLATE~ environment.

* Installing Linux kernel

#+begin_src shell
  echo 'sys-kernel/linux-firmware @BINARY-REDISTRIBUTABLE' \
      >/etc/portage/package.license/10-linux-firmware
  emerge -av sys-kernel/linux-firmware
  emerge -av sys-firmware/intel-microcode  # For Intel CPUs.
  emerge -av sys-kernel/installkernel-systemd-boot
  emerge -av sys-kernel/gentoo-kernel-bin
#+end_src

* Installing system tools

Installing filesystem tools:

#+begin_src shell
  emerge -av sys-fs/{btrfs-progs,cryptsetup,dosfstools}
#+end_src

Installing network tools (e. g. use iwd with systemd-networkd):

#+begin_src shell
  emerge -av net-wireless/iwd
#+end_src

=/etc/systemd/network/25-wireless.network= example:

#+begin_example
  [Match]
  Name=wlan0

  [Network]
  DHCP=yes
  IgnoreCarrierLoss=3s

  [DHCPv4]
  RouteMetric=20

  [IPv6AcceptRA]
  RouteMetric=20
#+end_example

=/etc/systemd/network/20-wired.network= example:

#+begin_example
  [Match]
  Name=enp0s3

  [Network]
  DHCP=yes

  [DHCPv4]
  RouteMetric=10

  [IPv6AcceptRA]
  RouteMetric=10
#+end_example

* Configuring system

#+begin_src shell
  echo "$hostname" >/etc/hostname
  passwd
  systemd-firstboot --prompt --setup-machine-id
  systemctl preset-all
#+end_src

=/etc/crypttab= example (~discard~ option for devices that support
trim):

#+begin_example
  cryptswap	/dev/disk/by-partuuid/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX	/dev/urandom	swap,discard
#+end_example

=/etc/fstab= example:

#+begin_example
  /dev/mapper/cryptos     /                               btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_root                               0       0
  /dev/mapper/cryptos     /srv                            btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_srv                                0       0
  /dev/mapper/cryptos     /usr/local                      btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_usr/sv_local                       0       0
  /dev/mapper/cryptos     /var/cache                      btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_cache                       0       0
  /dev/mapper/cryptos     /var/games                      btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_games                       0       0
  /dev/mapper/cryptos     /var/log                        btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_log                         0       0
  /dev/mapper/cryptos     /var/mail                       btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_mail                        0       0
  /dev/mapper/cryptos     /var/spool                      btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_spool                       0       0
  /dev/mapper/cryptos     /var/tmp                        btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_tmp                         0       0
  /dev/mapper/cryptos     /var/lib/AccountsService        btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_AccountsService      0       0
  /dev/mapper/cryptos     /var/lib/NetworkManager         btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_NetworkManager       0       0
  /dev/mapper/cryptos     /var/lib/docker                 btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_docker               0       0
  /dev/mapper/cryptos     /var/lib/libvirt                btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_libvirt              0       0
  /dev/mapper/cryptos     /var/lib/machines               btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_machines             0       0
  /dev/mapper/cryptos     /var/lib/portables              btrfs   defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_var/sv_lib/sv_portables            0       0
  /dev/mapper/cryptos     /home                           btrfs   defaults,compress=zstd,subvol=/sv_userdata/sv_home                                      0       0
  /dev/mapper/cryptos     /root                           btrfs   defaults,compress=zstd,subvol=/sv_userdata/sv_root                                      0       0
  /dev/mapper/cryptos     /.btrfs/snapshots               btrfs   defaults,compress=zstd,subvol=/sv_snapshots                                             0       0
  UUID=XXXX-XXXX          /boot                           vfat    defaults                                                                                0       2
  /dev/mapper/cryptswap   none                            swap    sw,discard                                                                              0       0
#+end_example

* Installing boot loader

Installing systemd-boot (and systemd cryptsetup):

#+begin_src shell
  echo 'sys-apps/systemd cryptsetup gnuefi' \
      >/etc/portage/package.use/10-systemd
  emerge -avDU @world
  bootctl install
#+end_src

=/etc/kernel/cmdline= example:

#+begin_example
  rd.luks.name="XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX=cryptos" rd.luks.options=discard root=/dev/mapper/cryptos rootfstype=btrfs rootflags="defaults,compress=zstd,subvol=/sv_roots/sv_gentoo/sv_root" splash quiet ro
#+end_example

where =XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX= is UUID
=/dev/root_partition=.

Setup initramfs:

#+begin_src shell
  mkdir /etc/dracut.conf.d
#+end_src

=/etc/dracut.conf.d/compress.conf= example:

#+begin_example
  compress="zstd"
#+end_example

Reconfigure kernel:

#+begin_src shell
  emerge --config "$kernel_atom"
#+end_src

* Finalizing

Exit the chrooted environment, unmount all mounted partitions, and
reboot:

#+begin_src shell
  exit
  cd
  umount -l /mnt/gentoo/dev{/shm,/pts,}
  umount -R /mnt/gentoo
  cryptsetup close cryptos
  reboot
#+end_src

Enable and setup services:

#+begin_src shell
  systemctl enable iwd.service  # For Wi-Fi.
  systemctl enable fstrim.timer  # For devices that support trim.
  ln -sfr /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
#+end_src

Creating a user:

#+begin_src shell
  useradd -mG wheel,users "$user"
  passwd "$user"
#+end_src

Giving a power to user:

#+begin_src shell
  emerge -av app-admin/sudo
  sed -i '/^#%wheel ALL=(ALL:ALL) ALL$/ s/#//' /etc/sudoers
  cat >/etc/polkit-1/rules.d/10-admin.rules <<-EOF
      polkit.addAdminRule(function(action, subject) {
          return ["unix-group:wheel"];
      });
  EOF
#+end_src

Removing tarball files:

#+begin_src shell
  rm /*.tar.xz*
#+end_src

* Footnotes

[fn:1] Taken from [[https://www.reddit.com/r/zfs/comments/112v7n9/comment/j8nxbru][this]] comment.

[fn:2] Taken from [[https://openzfs.github.io/openzfs-docs/Project%20and%20Community/FAQ.html#selecting-dev-names-when-creating-a-pool-linux][this]] document.

[fn:3] Taken from [[https://github.com/openzfs/zfs/issues/7734][this]] issue.

[fn:4] See [[https://www.reddit.com/r/zfs/comments/bnvdco/zol_080_encryption_dont_encrypt_the_pool_root][this]] for more information.

[fn:5] See [[https://www.reddit.com/r/zfs/comments/112v7n9][this]] post.

[fn:6] See [[https://github.com/systemd/systemd/blob/822cd601357f6f45d0176ae38fe9f86077462f06/tmpfiles.d/home.conf#L11][1]], [[https://github.com/systemd/systemd/blob/822cd601357f6f45d0176ae38fe9f86077462f06/tmpfiles.d/systemd-nspawn.conf#L10][2]], and [[https://github.com/systemd/systemd/blob/61d0578b07b97cbffebfd350bac481274e310d39/tmpfiles.d/portables.conf#L4][3]].
