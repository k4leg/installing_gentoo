# SPDX-FileCopyrightText: 2023 Bogdan Ruslanovich Drozd <bogdan.ruslanovich.drozd@yandex.com>
#
# SPDX-License-Identifier: CC-BY-SA-4.0

#+language: en
#+options: ':t author:nil
#+title: Installing Gentoo

* Introduction

The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in [[https://www.rfc-editor.org/rfc/rfc2119.txt][RFC 2119]].

This document describes how to install Gentoo with systemd, ZFS with
native encryption on root, swap on zvol, and systemd-boot on an amd64
system.

This document is not a replacement for official [[https://wiki.gentoo.org/wiki/Handbook:Main_Page][Gentoo Handbook]], you
SHOULD read it before your first installation.

* Installation media

You can use any installation media which contains the following:

- Userland utilities for ZFS
- DOS filesystem tools
- fio (for ~ashift~ property test)

[[https://wiki.gentoo.org/wiki/Handbook:AMD64/Full/Installation#Downloading][Gentoo Admin CD]] fits.

* Partitioning the data storage

| Partition                   | Size                 | Type         |
|-----------------------------+----------------------+--------------|
| =/dev/efi_system_partition= | 256--1024 MiB        | EFI System   |
| =/dev/root_partition=       | Rest of data storage | Solaris root |

You can use ~fdisk~ for partitioning.

** Caveats

You SHOULD NOT use filesystem type like "Linux root (x86-64)".  There
is [[info:systemd-gpt-auto-generator(8)][systemd-gpt-auto-generator]] that automatically tries to mount that
filesystems.  systemd will not find there what expects.

If you want it anyway, then add ~systemd.gpt_auto=0~ to the kernel
command line parameters.

* ZFS caveats

You SHOULD see [[https://openzfs.github.io/openzfs-docs/Project%20and%20Community/FAQ.html][OpenZFS FAQ]] and [[https://github.com/openzfs/zfs/issues][OpenZFS issues]].

** ~ashift~ property

To test for optimal ~ashift~ property run the following command for
each value of ~ashift~, and look for the lowest latency values[fn:1]:

#+begin_src shell
  fio \
      --name=ashift_test \
      --rw=write \
      --bs=64K \
      --fsync=1 \
      --size=1G \
      --numjobs=1 \
      --iodepth=1
#+end_src

** Path to partition

Instead of using =/dev= you SHOULD use =/dev/disk/by-id=[fn:2].  To
find your data storage in =/dev/disk/by-id= you can use the following
command:

#+begin_src shell
  find -L /dev/disk/by-id -samefile /dev/dspart3
#+end_src

** Swap

Swap on zvol may lead to deadlock[fn:3].

** Root dataset encryption

You SHOULD NOT add ~encryption~ property to root dataset[fn:4].

* Creating and mounting filesystems

#+begin_src shell
  mkfs.vfat -F 32 /dev/efi_system_partition
  modprobe zfs
  zpool create \
      -o ashift="$ashift" \
      -O dnodesize=auto \
      -O acltype=posix \
      -O xattr=sa \
      -O normalization=formD \
      -O relatime=on \
      -O mountpoint=none \
      -O canmount=off \
      -O compression=on \
      -R /mnt/gentoo \
      rpool /dev/root_partition
  zfs create \
      -o mountpoint=none \
      -o canmount=off \
      -o encryption=on \
      -o keyformat=passphrase \
      -o keylocation=prompt \
      rpool/enc
  zfs create -o mountpoint=none -o canmount=off rpool/enc/root
  zfs create -o mountpoint=/ -o canmount=noauto rpool/enc/root/gentoo
  zpool set bootfs=rpool/enc/root/gentoo rpool
  zfs mount rpool/enc/root/gentoo
  mkdir /mnt/gentoo/boot
  mount /dev/efi_system_partition /mnt/gentoo/boot
  zfs create -o canmount=off rpool/enc/root/gentoo/usr
  zfs create -o canmount=off rpool/enc/root/gentoo/var
  zfs create -o canmount=off rpool/enc/root/gentoo/var/lib
  zfs create rpool/enc/root/gentoo/srv
  zfs create rpool/enc/root/gentoo/usr/local
  zfs create rpool/enc/root/gentoo/var/cache
  zfs create rpool/enc/root/gentoo/var/games
  zfs create rpool/enc/root/gentoo/var/lib/AccountsService
  zfs create rpool/enc/root/gentoo/var/lib/NetworkManager
  zfs create rpool/enc/root/gentoo/var/lib/docker
  zfs create rpool/enc/root/gentoo/var/lib/machines
  zfs create rpool/enc/root/gentoo/var/lib/portables
  zfs create rpool/enc/root/gentoo/var/log
  zfs create rpool/enc/root/gentoo/var/mail
  zfs create rpool/enc/root/gentoo/var/spool
  zfs create rpool/enc/root/gentoo/var/tmp
  zfs create -o mountpoint=/home rpool/enc/home
  zfs create -o mountpoint=/root rpool/enc/home/root
  zfs create \
      -o logbias=throughput \
      -o sync=always \
      -o primarycache=metadata \
      -o secondarycache=none \
      -o compression=zle \
      -b "$(getconf PAGESIZE)" \
      -V "$swap_size" \
      rpool/enc/swap
  mkswap /dev/zvol/rpool/enc/swap
#+end_src

Note that datasets for =/srv=, =/var/lib/machines=, and
=/var/lib/portables= wanted by systemd[fn:5].  To view all datasets
that systemd wants:

#+begin_src shell
  grep '^[vqQ]' /usr/lib/tmpfiles.d/*
#+end_src

* Installing a stage tarball

#+begin_src shell
  ntpd -qg
  cd /mnt/gentoo
  wget "$stage_file"{,.asc,.sha256}
  gpg --import /usr/share/openpgp-keys/gentoo-release.asc
  gpg --verify *.asc
  gpg --verify *.sha256
  chksum="$(sha256sum *.tar.xz | cut -d' ' -f1)"
  grep "$chksum" *.sha256
  tar xpvf *.tar.xz --xattrs-include='*.*' --numeric-owner
  echo $?  # Verify that tar unpack archive successfully.
#+end_src

* Chrooting

#+begin_src shell
  mirrorselect -io >>/mnt/gentoo/etc/portage/make.conf
  mkdir /mnt/gentoo/etc/portage/repos.conf
  cp /mnt/gentoo/usr/share/portage/config/repos.conf \
      /mnt/gentoo/etc/portage/repos.conf/gentoo.conf
  cp -L /etc/resolv.conf /mnt/gentoo/etc
  mount -t proc /proc /mnt/gentoo/proc
  mount -R /sys /mnt/gentoo/sys
  mount --make-rslave /mnt/gentoo/sys
  mount -R /dev /mnt/gentoo/dev
  mount --make-rslave /mnt/gentoo/dev
  mount -B /run /mnt/gentoo/run
  mount --make-slave /mnt/gentoo/run
  chroot /mnt/gentoo /bin/bash
  source /etc/profile
  export PS1="(chroot) $PS1"
#+end_src

* Configuring Portage

#+begin_src shell
  emerge-webrsync
  emerge --sync
  eselect news list
  eselect news read
  eselect profile list
  eselect profile set "$profile"
  emerge -avuDN @world
  mkdir /etc/portage/{package.{env,license},env}
#+end_src

* Configuring timezone

#+begin_src shell
  ln -sfr /usr/share/zoneinfo/Region/City /etc/localtime
#+end_src

* Configuring locale

=/etc/locale.gen= example:

#+begin_example
  en_US.UTF-8 UTF-8
#+end_example

Generate locales:

#+begin_src shell
  locale-gen
#+end_src

Select locale:

#+begin_src shell
  eselect locale list
  eselect locale set "$locale"
#+end_src

=/etc/locale.conf= example:

#+begin_example
  LANG="en_US.utf8"
  LC_COLLATE="C.utf8"
#+end_example

Reload the environment:

#+begin_src shell
  env-update
  source /etc/profile
  export PS1="(chroot) $PS1"
#+end_src

** Caveats

You SHOULD use "C.utf8" locale for ~LC_COLLATE~ environment.

* Installing Linux kernel

#+begin_src shell
  echo 'sys-kernel/linux-firmware @BINARY-REDISTRIBUTABLE' \
      >/etc/portage/package.license/10-linux-firmware
  emerge -av sys-kernel/linux-firmware
  emerge -av sys-firmware/intel-microcode  # For Intel CPUs.
  emerge -av sys-kernel/installkernel-systemd-boot
  emerge -av sys-kernel/gentoo-kernel-bin
#+end_src

* Installing system tools

Installing filesystem tools:

#+begin_src shell
  echo 'USE="dist-kernel"' >>/etc/portage/make.conf
  emerge -av sys-fs/{dosfstools,zfs}
  zgenhostid
#+end_src

Installing network tools (e. g. use iwd with systemd-networkd):

#+begin_src shell
  emerge -av net-wireless/iwd
#+end_src

=/etc/systemd/network/25-wireless.network= example:

#+begin_example
  [Match]
  Name=wlan0

  [Network]
  DHCP=yes
  IgnoreCarrierLoss=3s

  [DHCPv4]
  RouteMetric=20

  [IPv6AcceptRA]
  RouteMetric=20
#+end_example

=/etc/systemd/network/20-wired.network= example:

#+begin_example
  [Match]
  Name=enp0s3

  [Network]
  DHCP=yes

  [DHCPv4]
  RouteMetric=10

  [IPv6AcceptRA]
  RouteMetric=10
#+end_example

* Configuring system

#+begin_src shell
  echo "$hostname" >/etc/hostname
  passwd
  systemd-firstboot --prompt --setup-machine-id
  systemctl preset-all
#+end_src

=/etc/fstab= example (~discard~ option for SSD):

#+begin_example
  UUID=XXXX-XXXX            /boot  vfat  defaults             0  2
  /dev/zvol/rpool/enc/swap  none   swap  defaults,sw,discard  0  0
#+end_example

* Installing boot loader

Installing systemd-boot:

#+begin_src shell
  echo 'sys-apps/systemd gnuefi' >/etc/portage/package.use/10-systemd
  emerge -avDU @world
  bootctl install
#+end_src

=/etc/kernel/cmdline= example:

#+begin_example
  root=zfs:rpool/enc/root/gentoo splash quiet ro
#+end_example

Setup =rpool= pool mounting:

#+begin_src shell -n -r
  mkdir /etc/zfs/zfs-list.cache
  touch /etc/zfs/zfs-list.cache/rpool
  zed -F &                                                          (ref:zed)
  kill -3 %
#+end_src

If =/etc/zfs/zfs-list.cache/rpool= non-empty, then re-run from
beginning of the [[(zed)]] line.

Fix paths to eliminate =/mnt/gentoo=:

#+begin_src shell
  sed -Ei 's|/mnt/gentoo/?|/|' /etc/zfs/zfs-list.cache/rpool
#+end_src

Setup initramfs:

#+begin_src shell
  mkdir /etc/dracut.conf.d
#+end_src

=/etc/dracut.conf.d/compress.conf= example:

#+begin_example
  compress="lz4"
#+end_example

Reconfigure kernel:

#+begin_src shell
  emerge --config "$kernel_atom"
#+end_src

* Finalizing

Exit the chrooted environment, unmount all mounted partitions, and
reboot:

#+begin_src shell
  exit
  cd
  umount -l /mnt/gentoo/dev{/shm,/pts,}
  umount /mnt/gentoo/boot
  mount \
      | grep -v zfs \
      | tac \
      | awk '/\/mnt\/gentoo/ { print $3 }' \
      | xargs umount -l
  zpool export -a
  reboot
#+end_src

Enable and setup services:

#+begin_src shell
  systemctl enable iwd.service  # For Wi-Fi.
  systemctl enable fstrim.timer  # For SSD.
  ln -sfr /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
#+end_src

Creating a user:

#+begin_src shell
  useradd -mG wheel,users "$user"
  passwd "$user"
#+end_src

Giving a power to user:

#+begin_src shell
  emerge -av app-admin/sudo
  sed -i '/^#%wheel ALL=(ALL:ALL) ALL$/ s/#//' /etc/sudoers
  cat >/etc/polkit-1/rules.d/10-admin.rules <<-EOF
          polkit.addAdminRule(function(action, subject) {
              return ["unix-group:wheel"];
          });
  EOF
#+end_src

Removing tarball files:

#+begin_src shell
  rm /*.tar.xz*
#+end_src

* Footnotes

[fn:1] Taken from [[https://www.reddit.com/r/zfs/comments/112v7n9/comment/j8nxbru][this]] comment.

[fn:2] Taken from [[https://openzfs.github.io/openzfs-docs/Project%20and%20Community/FAQ.html#selecting-dev-names-when-creating-a-pool-linux][this]] document.

[fn:3] Taken from [[https://github.com/openzfs/zfs/issues/7734][this]] issue.

[fn:4] See [[https://www.reddit.com/r/zfs/comments/bnvdco/zol_080_encryption_dont_encrypt_the_pool_root][this]] for more information.

[fn:5] See [[https://github.com/systemd/systemd/blob/822cd601357f6f45d0176ae38fe9f86077462f06/tmpfiles.d/home.conf#L11][1]], [[https://github.com/systemd/systemd/blob/822cd601357f6f45d0176ae38fe9f86077462f06/tmpfiles.d/systemd-nspawn.conf#L10][2]], and [[https://github.com/systemd/systemd/blob/61d0578b07b97cbffebfd350bac481274e310d39/tmpfiles.d/portables.conf#L4][3]].
